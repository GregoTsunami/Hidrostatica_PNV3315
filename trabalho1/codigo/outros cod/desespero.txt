import mat2py as mp
from mat2py.core import *


def main():
    clear("all")
    close("all")
    clc
    geral = importdata("hidrostatica.txt")
    Nwl = geral(1, 1)
    Nbal = geral(1, 2)
    Deckline = geral(1, 3)
    Contour = geral(1, 4)
    AftC = geral(1, 5)
    FwC = geral(1, 6)
    FoB = geral(1, 7)
    precisao = 0.05
    dens = 1.025
    Lwl = geral(1, 8)
    Bwl = geral(1, 9)
    Twl = geral(1, 10)
    Hwl = geral(2, M[2 : (1 + Nwl)])
    distLA = Hwl(2) - Hwl(1)
    Bal = geral(M[4 : (3 + Nbal)], 1)
    distBAL = Bal(2) - Bal(1)
    Cpopa = geral(3, M[2 : (1 + Nwl)])
    Cproa = geral(4 + Nbal, M[2 : (1 + Nwl)])
    BW = geral(M[4 : (3 + Nbal)], M[2 : (1 + Nwl)])
    Hdeck = geral(M[4 : (3 + Nbal)], 2 + Nwl)
    Bdeck = geral(M[4 : (3 + Nbal)], 3 + Nwl)
    Hbal = geral(M[4 : (3 + Nbal)], 4 + Nwl)
    if min(Cpopa) < 0:
        L = abs(min(Cpopa)) + max(Cproa)
    else:
        L = max(Cproa) - min(Cpopa)
    for j in M[1:Nbal]:
        Hwlaux[I[1]] = Hbal(j)
        for i in M[1:Nwl]:
            Hwlaux[I[i + 1]] = Hwl(i)

        Hwlaux[I[i + 2]] = Hdeck(j)
        BWaux[I[1]] = 0.0
        for i in M[1:Nwl]:
            BWaux[I[i + 1]] = BW(j, i)

        BWaux[I[i + 2]] = Bdeck(j)
        k = 1
        while k <= (length(Hwlaux) - 1):
            if Hwlaux(k + 1) <= Hwlaux(k):
                BWaux[I[k + 1]] = M[[]]
                Hwlaux[I[k + 1]] = M[[]]
            else:
                k = k + 1

        BALsp[I[j]] = spline(Hwlaux, BWaux)

    for j in M[1:Nwl]:
        Balaux = copy(Bal)
        BWaux = BW[I[:, j]]
        k = 1
        while k <= (length(Balaux) - 1):
            if BWaux(k) <= 0:
                if Balaux(k) < (L / 2):
                    if BWaux(k + 1) <= 0:
                        BWaux[I[k]] = M[[]]
                        Balaux[I[k]] = M[[]]
                    else:
                        Balaux[I[k]] = Cpopa(j)
                        k = k + 1
                else:
                    if BWaux(k + 1) <= 0:
                        BWaux[I[k + 1]] = M[[]]
                        Balaux[I[k + 1]] = M[[]]
                        Balaux[I[k]] = Cproa(j)
            else:
                k = k + 1

        if Balaux(length(Balaux)) < Cproa(j):
            Balaux[I[length(Balaux) + 1]] = Cproa(j)
            BWaux[I[length(Balaux)]] = 0
        LAsp[I[j]] = spline(Balaux, BWaux)

    figure
    for k in M[1 : length(Bal)]:
        Hwlaux = M[Hbal(k) : 0.01 : Hdeck(k)]
        clear("z")
        z = ones(length(Hwlaux), 1)
        z = M[z] @ Bal(k)
        eixox = ppval(BALsp(k), Hwlaux)
        i = 1
        while i < (length(Hwlaux) - 1):
            if Hwlaux(i + 1) <= Hwlaux(i):
                eixox[I[i + 1]] = eixox(i)
                eixox[I[i]] = M[[]]
                Hwlaux[I[i + 1]] = Hwlaux(i)
                Hwlaux[I[i]] = M[[]]
                z[I[i + 1]] = z(i)
                z[I[i]] = M[[]]
            else:
                i = i + 1

        for i in M[1 : length(eixox)]:
            if eixox(i) < 0:
                eixox[I[i]] = 0

        plot3(eixox, Hwlaux, z)
        hold("on")
        xlim(M[[0, max(Bdeck) + 1]])
        daspect(M[[1, 1, 1]])

    figure
    for k in M[1 : length(Hwl)]:
        Balaux = M[Cpopa(k) : 0.01 : Cproa(k)]
        i = 1
        while i < (length(Balaux) - 1):
            if Balaux(i + 1) <= Balaux(i):
                Balaux[I[i + 1]] = M[[]]
            else:
                if Balaux(i + 1) >= Balaux(length(Balaux)):
                    Balaux[I[i + 1]] = M[[]]
                else:
                    i = i + 1

        clear("z")
        z = ones(length(Balaux), 1)
        z = M[z] @ Hwl(k)
        eixox = ppval(LAsp(k), Balaux)
        for i in M[1 : length(eixox)]:
            if eixox(i) < 0:
                eixox[I[i]] = 0

        plot3(eixox, Balaux, z)
        hold("on")
        xlim(M[[0, max(Bdeck) + 1]])
        daspect(M[[1, 1, 1]])

    i = 1
    while i < Nbal:
        if Hbal(i) > min(Hbal):
            i = i + 1
        else:
            Hpopa[I[1]] = Hbal(i)
            Lpopa[I[1]] = Bal(i)
            i = Nbal + 1

    for i in M[1:Nwl]:
        Hpopa[I[i + 1]] = Hwl(i)
        Lpopa[I[i + 1]] = Cpopa(i)

    Hpopa[I[length(Hpopa) + 1]] = max(Hdeck)
    Lpopa[I[length(Lpopa) + 1]] = min(Cpopa)
    figure
    Haux = M[0 : 0.1 : max(Hdeck)]
    Popasp = spline(Hpopa, Lpopa)
    c = ppval(Popasp, Haux)
    eixoz = ppval(Popasp, Haux)
    plot(eixoz, Haux)
    i = copy(Nbal)
    while i > 0:
        if Hbal(i) > min(Hbal):
            i = i - 1
        else:
            Hproa[I[1]] = Hbal(i)
            Lproa[I[1]] = Bal(i)
            i = -1

    for i in M[1:Nwl]:
        Hproa[I[i + 1]] = Hwl(i)
        Lproa[I[i + 1]] = Cproa(i)

    figure
    Haux = M[0 : 0.1 : max(Hdeck)]
    Proasp = spline(Hproa, Lproa)
    eixoz = ppval(Proasp, Haux)
    plot(eixoz, Haux)
    erro = 1
    iteracoes = 0
    Ideck = ppval(Popasp, max(Hdeck))
    Fdeck = ppval(Proasp, max(Hdeck))
    Ibal = min(Hbal)
    Fbal = max(Hdeck)
    if Ideck < 0:
        Lmax = abs(Ideck) + Fdeck
    else:
        Lmax = Fdeck - Ideck
    Balaux[I[1]] = copy(Ideck)
    while abs(erro) > precisao:
        clear("intBAL", "intLA")
        intBAL = M[Ideck:distBAL:Fdeck]
        intLA = M[Ibal:distLA:Fbal]
        clear("nBALint", "nLAint")
        nBALint = length(intBAL)
        nLAint = length(intLA)
        clear("BALspintpts")
        for n in M[1 : length(LAsp)]:
            BALspintpts[I[n, :]] = ppval(LAsp(n), intBAL)
            for m in M[1 : length(intBAL)]:
                if intBAL(m) < (Lmax / 2):
                    if intBAL(m) < Cpopa(n):
                        BALspintpts[I[n, m]] = 0
                else:
                    if intBAL(m) > Cproa(n):
                        Balspintpts[I[n, m]] = 0

        clear("BALspint")
        for q in M[1:nBALint]:
            BALspint[I[q]] = spline(Hwl, BALspintpts[I[:, q]])

        clear("LAspintpts")
        for n in M[1 : length(BALsp)]:
            LAspintpts[I[:, n]] = ppval(BALsp(n), intLA)
            for m in M[1 : length(intLA)]:
                if intLA(m) < Hbal(n):
                    LAspintpts[I[m, n]] = 0

        clear("LAspint")
        for p in M[1:nLAint]:
            LAspint[I[p]] = spline(Bal, LAspintpts[I[p, :]])

        clear("intOffset")
        for i in M[1:nLAint]:
            intOffset[I[i, :]] = ppval(LAspint(i), intBAL)

        X = M[[]]
        Y = M[[]]
        Z = M[[]]
        for i in M[1 : 1 : (nLAint - 1)]:
            for j in M[1 : 1 : (nBALint - 1)]:
                if (intOffset(i, j) >= 0) and (intOffset(i, j + 1) >= 0):
                    Xtemp[I[1]] = intBAL(j)
                    Xtemp[I[2]] = Xtemp(1)
                    Xtemp[I[3]] = intBAL(j + 1)
                    Xtemp[I[4]] = Xtemp(3)
                    Ytemp[I[1]] = intOffset(i + 1, j)
                    Ytemp[I[2]] = intOffset(i, j)
                    Ytemp[I[3]] = intOffset(i, j + 1)
                    Ytemp[I[4]] = intOffset(i + 1, j + 1)
                    Ztemp[I[1]] = intLA(i + 1)
                    Ztemp[I[2]] = intLA(i)
                    Ztemp[I[3]] = Ztemp(2)
                    Ztemp[I[4]] = Ztemp(1)
                    X = M[
                        X,
                        Xtemp,
                    ]
                    Y = M[
                        Y,
                        Ytemp,
                    ]
                    Z = M[
                        Z,
                        Ztemp,
                    ]

        for i in M[1 : 1 : (nLAint - 1)]:
            if (intOffset(i, 1) >= 0) and (intOffset(i + 1, 1) >= 0):
                Xtemp[I[1]] = intBAL(1)
                Xtemp[I[2]] = Xtemp(1)
                Xtemp[I[3]] = intBAL(1)
                Xtemp[I[4]] = Xtemp(3)
                Ytemp[I[1]] = 0
                Ytemp[I[2]] = 0
                Ytemp[I[3]] = intOffset(i, 1)
                Ytemp[I[4]] = intOffset(i + 1, 1)
                Ztemp[I[1]] = intLA(i + 1)
                Ztemp[I[2]] = intLA(i)
                Ztemp[I[3]] = Ztemp(2)
                Ztemp[I[4]] = Ztemp(1)
                X = M[
                    X,
                    Xtemp,
                ]
                Y = M[
                    Y,
                    Ytemp,
                ]
                Z = M[
                    Z,
                    Ztemp,
                ]

        for i in M[1 : 1 : (nBALint - 1)]:
            if (intOffset(1, i) >= 0) and (intOffset(1, i + 1) >= 0):
                Xtemp[I[1]] = intBAL(i)
                Xtemp[I[2]] = Xtemp(1)
                Xtemp[I[3]] = intBAL(i + 1)
                Xtemp[I[4]] = Xtemp(3)
                Ytemp[I[1]] = intOffset(1, i)
                Ytemp[I[2]] = 0
                Ytemp[I[3]] = 0
                Ytemp[I[4]] = intOffset(1, i + 1)
                Ztemp[I[1]] = intLA(1)
                Ztemp[I[2]] = intLA(1)
                Ztemp[I[3]] = Ztemp(2)
                Ztemp[I[4]] = Ztemp(1)
                X = M[
                    X,
                    Xtemp,
                ]
                Y = M[
                    Y,
                    Ytemp,
                ]
                Z = M[
                    Z,
                    Ztemp,
                ]

        Amod = M[[]]
        Avec = M[[]]
        for i in M[1 : 1 : length(X)]:
            Pts = M[[]]
            for j in M[1:1:4]:
                Pts[I[j, :]] = M[[X(i, j), Y(i, j), Z(i, j)]]

            V[I[1, :]] = Pts[I[2, :]] - Pts[I[1, :]]
            V[I[2, :]] = Pts[I[4, :]] - Pts[I[1, :]]
            V[I[3, :]] = Pts[I[4, :]] - Pts[I[3, :]]
            V[I[4, :]] = Pts[I[2, :]] - Pts[I[3, :]]
            Avectemp = (
                cross(V[I[1, :]], V[I[2, :]]) + cross(V[I[3, :]], V[I[4, :]])
            ) / 2
            Avec = M[
                Avec,
                Avectemp,
            ]
            Amod = M[
                Amod,
                sqrt(((Avectemp(1) ** 2) + (Avectemp(2) ** 2)) + (Avectemp(3) ** 2)),
            ]
            base1 = sqrt((V(2, 1) ** 2) + (V(2, 2) ** 2))
            base2 = sqrt((V(4, 1) ** 2) + (V(4, 2) ** 2))
            area1 = cross(V[I[1, :]], V[I[2, :]])
            area2 = cross(V[I[3, :]], V[I[4, :]])
            haltura1 = mrdivide(
                sqrt(((area1(1) ** 2) + (area1(2) ** 2)) + (area1(3) ** 2)), base1
            )
            haltura2 = mrdivide(
                sqrt(((area2(1) ** 2) + (area2(2) ** 2)) + (area2(3) ** 2)), base2
            )
            c1 = sqrt(
                (((V(2, 1) + V(1, 1)) ** 2) + ((V(2, 2) + V(1, 2)) ** 2))
                - (haltura1**2)
            )
            c2 = sqrt(
                (((V(3, 1) + V(4, 1)) ** 2) + ((V(3, 2) + V(4, 2)) ** 2))
                - (haltura2**2)
            )
            m1 = (M[base1] @ haltura1) / 12
            m2 = (M[base2] @ haltura2) / 12
            a1 = 3 * base1
            a2 = 3 * base2
            momentox1 = M[m1] @ (haltura1**2)
            momentox2 = M[m2] @ (haltura2**2)
            momentoxy1 = (M[m1] @ haltura1) @ (M[(a1 / 2) - c1])
            momentoy1 = M[m1] @ (((M[a1] @ base1) - (M[a1] @ c1)) + (c1**2))
            momentoy2 = M[m2] @ (((M[a2] @ base2) - (M[a2] @ c2)) + (c2**2))
            momentoxy2 = (M[m2] @ haltura2) @ (M[(a2 / 2) - c2])
            theta1 = atan(mrdivide(V(2, 1), V(2, 2)))
            theta2 = atan(mrdivide(V(4, 1), V(4, 2)))
            Ipx1 = (
                ((momentox1 + momentoy1) / 2)
                + (((momentox1 - momentoy1) @ M[cos(2 * theta1)]) / 2)
            ) - (M[momentoxy1] @ sin(2 * theta1))
            Ipx2 = (
                ((momentox2 + momentoy2) / 2)
                + (((momentox2 - momentoy2) @ M[cos(2 * theta2)]) / 2)
            ) - (M[momentoxy2] @ sin(2 * theta2))
            Ipy1 = (
                ((momentox1 + momentoy1) / 2)
                - (((momentox1 - momentoy1) @ M[cos(2 * theta1)]) / 2)
            ) + (M[momentoxy1] @ sin(2 * theta1))
            Ipy2 = (
                ((momentox2 + momentoy2) / 2)
                - (((momentox2 - momentoy2) @ M[cos(2 * theta2)]) / 2)
            ) + (M[momentoxy2] @ sin(2 * theta2))
            Ipl[I[i]] = Ipy1 + Ipy2
            Ipt[I[i]] = Ipx1 + Ipx2

        centro = M[[]]
        for i in M[1 : 1 : length(X)]:
            centro[I[i, 1]] = (((X(i, 1) + X(i, 2)) + X(i, 3)) + X(i, 4)) / 4
            centro[I[i, 2]] = (((Y(i, 1) + Y(i, 2)) + Y(i, 3)) + Y(i, 4)) / 4
            centro[I[i, 3]] = (((Z(i, 1) + Z(i, 2)) + Z(i, 3)) + Z(i, 4)) / 4

        Vol = M[[]]
        AMol = M[[]]
        Awl = M[[]]
        LCF = M[[]]
        TCF = M[[]]
        CB = M[[]]
        Tcm = M[[]]
        Cwl = M[[]]
        Il = M[[]]
        It = M[[]]
        desloc = M[[]]
        BMt = M[[]]
        BMl = M[[]]
        Cb = M[[]]
        for i in M[1:1:nLAint]:
            calcHidros = M[[]]
            Lpaineis = M[[]]
            Bpaineis = M[[]]
            for k in M[1 : 1 : length(Z)]:
                if Z(k, 1) <= intLA(i):
                    calcHidros = M[[calcHidros, k]]
                    Lpaineis = M[
                        Lpaineis,
                        [X(k, 1), X(k, 3)],
                    ]
                    Bpaineis = M[
                        Bpaineis,
                        [Y(k, 1), Y(k, 3)],
                    ]

            Voltemp = 0
            AMoltemp = 0
            Awltemp = 0
            Abalcpmtemp = 0
            LCFnumtemp = 0
            TCFnumtemp = 0
            LCBnumtemp = 0
            TCBnumtemp = 0
            KBnumtemp = 0
            Tcmtemp = 0
            Iltemp = 0
            Ittemp = 0
            for j in M[1 : 1 : length(calcHidros)]:
                Voltemp = Voltemp + (
                    (
                        (
                            (M[Avec(calcHidros(j), 1)] @ (0 - centro(calcHidros(j), 1)))
                            + (
                                M[Avec(calcHidros(j), 2)]
                                @ (0 - centro(calcHidros(j), 2))
                            )
                        )
                        + (
                            M[Avec(calcHidros(j), 3)]
                            @ (intLA(i) - centro(calcHidros(j), 3))
                        )
                    )
                    / 3
                )
                AMoltemp = AMoltemp + Amod(calcHidros(j))
                Awltemp = Awltemp + Avec(calcHidros(j), 3)
                if Avec(calcHidros(j), 1) > 0:
                    Abalcpmtemp = Abalcpmtemp + Avec(calcHidros(j), 1)
                LCFnumtemp = LCFnumtemp + (
                    M[Avec(calcHidros(j), 3)] @ centro(calcHidros(j), 1)
                )
                TCFnumtemp = TCFnumtemp + (
                    M[Avec(calcHidros(j), 3)] @ centro(calcHidros(j), 2)
                )
                LCBnumtemp = LCBnumtemp + (
                    (
                        (M[Avec(calcHidros(j), 1)] @ (0 - centro(calcHidros(j), 1)))
                        @ M[centro(calcHidros(j), 1)]
                    )
                    / 2
                )
                TCBnumtemp = TCBnumtemp + (
                    (
                        (M[Avec(calcHidros(j), 2)] @ (0 - centro(calcHidros(j), 2)))
                        @ M[centro(calcHidros(j), 2)]
                    )
                    / 2
                )
                KBnumtemp = KBnumtemp + (
                    (
                        (
                            M[Avec(calcHidros(j), 3)]
                            @ (intLA(i) - centro(calcHidros(j), 3))
                        )
                        @ (M[intLA(i) - centro(calcHidros(j), 3)])
                    )
                    / 2
                )

            for j in M[1 : 1 : length(calcHidros)]:
                Iltemp = (
                    Iltemp
                    + (
                        M[Avec(calcHidros(j), 3)]
                        @ (
                            (centro(calcHidros(j), 1) - (mrdivide(LCFnumtemp, Awltemp)))
                            ** 2
                        )
                    )
                ) + Ipl(calcHidros(j))
                Ittemp = (
                    Ittemp
                    + (M[Avec(calcHidros(j), 3)] @ (centro(calcHidros(j), 2) ** 2))
                ) + Ipt(calcHidros(j))

            Vol[I[i]] = 2 * Voltemp
            AMol[I[i]] = 2 * AMoltemp
            Awl[I[i]] = 2 * Awltemp
            Abalcpm[I[i]] = Abalcpmtemp * 2
            LCF[I[i]] = (mrdivide(2 * LCFnumtemp, Awl(i))) - (Lwl / 2)
            TCF[I[i]] = mrdivide(2 * TCFnumtemp, Awl(i))
            CB[I[i, 1]] = (mrdivide(2 * LCBnumtemp, Vol(i))) - (Lwl / 2)
            CB[I[i, 2]] = mrdivide(2 * TCBnumtemp, Vol(i))
            CB[I[i, 3]] = mrdivide(2 * KBnumtemp, Vol(i))
            Il[I[i]] = 2 * Iltemp
            It[I[i]] = 2 * Ittemp
            Tcm[I[i]] = (Awl(i) @ M[dens]) / 100
            Lcalado = max(max(Lpaineis)) - min(min(Lpaineis))
            Bcalado = max(max(Bpaineis)) - min(min(Bpaineis))
            if _not(Bcalado == 0):
                if _not(Lcalado == 0):
                    Cwl[I[i]] = mrdivide(Awl(i), (2 * Bcalado) @ M[Lcalado])
                    Cp[I[i]] = mrdivide(Vol(i), Abalcpm(i) @ M[Lcalado])
            desloc[I[i]] = Vol(i) @ M[dens]
            BMt[I[i]] = mrdivide(It(i), Vol(i))
            BMl[I[i]] = mrdivide(Il(i), Vol(i))
            if _not(Bcalado == 0):
                if _not(Lcalado == 0):
                    Cb[I[i]] = mrdivide(
                        Vol(i), ((2 * Bcalado) @ M[Lcalado]) @ M[intLA(i)]
                    )

        if iteracoes == 0:
            Volumeanterior = Vol(nLAint)
        else:
            erro = mrdivide(Vol(nLAint) - Volumeanterior, Vol(nLAint))
            Volumeanterior = Vol(nLAint)
        distBAL = distBAL / 2
        distLA = distLA / 2
        iteracoes = iteracoes + 1

    distBAL = distBAL * 2
    distLA = distLA * 2
    figure
    for k in M[1 : length(Bal)]:
        Hwlaux = M[Hbal(k) : 0.01 : Hdeck(k)]
        clear("z")
        z = ones(length(Hwlaux), 1)
        z = M[z] @ Bal(k)
        eixox = ppval(BALsp(k), Hwlaux)
        i = 1
        while i < (length(Hwlaux) - 1):
            if Hwlaux(i + 1) <= Hwlaux(i):
                eixox[I[i + 1]] = eixox(i)
                eixox[I[i]] = M[[]]
                Hwlaux[I[i + 1]] = Hwlaux(i)
                Hwlaux[I[i]] = M[[]]
                z[I[i + 1]] = z(i)
                z[I[i]] = M[[]]
            else:
                i = i + 1

        for i in M[1 : length(eixox)]:
            if eixox(i) < 0:
                eixox[I[i]] = 0

        plot3(eixox, Hwlaux, z)
        hold("on")
        xlim(M[[0, max(Bdeck) + 1]])
        daspect(M[[1, 1, 1]])

    figure
    for k in M[1:nBALint]:
        clear("z")
        z = ones(length(intLA), 1)
        z = (M[z] @ (k - 1)) @ M[distBAL]
        eixox = ppval(BALspint(k), intLA)
        for i in M[1:nLAint]:
            if eixox(i) < 0:
                eixox[I[i]] = 0

        plot3(eixox, intLA, z)
        hold("on")
        xlim(M[[0, 2 * Bwl]])
        daspect(M[[1, 1, 1]])

    figure
    for k in M[1 : length(Hwl)]:
        Balaux = M[Cpopa(k) : 0.01 : Cproa(k)]
        i = 1
        while i < (length(Balaux) - 1):
            if Balaux(i + 1) <= Balaux(i):
                Balaux[I[i + 1]] = M[[]]
            else:
                if Balaux(i + 1) >= Balaux(length(Balaux)):
                    Balaux[I[i + 1]] = M[[]]
                else:
                    i = i + 1

        clear("z")
        z = ones(length(Balaux), 1)
        z = M[z] @ Hwl(k)
        eixox = ppval(LAsp(k), Balaux)
        for i in M[1 : length(eixox)]:
            if eixox(i) < 0:
                eixox[I[i]] = 0

        plot3(eixox, Balaux, z)
        hold("on")
        xlim(M[[0, max(Bdeck) + 1]])
        daspect(M[[1, 1, 1]])

    figure
    for k in M[1:nLAint]:
        clear("z")
        z = ones(length(intBAL), 1)
        z = (M[z] @ (k - 1)) @ M[distLA]
        eixox = ppval(LAspint(k), intBAL)
        for i in M[1 : length(eixox)]:
            if eixox(i) < 0:
                eixox[I[i]] = 0

        plot3(eixox, intBAL, z)
        hold("on")
        xlim(M[[0, 2 * Bwl]])
        daspect(M[[1, 1, 1]])

    figure
    hold("on")
    plot(Vol, intLA, "b")
    plot(AMol, intLA, "r")
    plot(Awl, intLA, "g")
    xlabel("m^2 , m^3")
    ylabel("Draught (m)")
    legend("Volume", "ï¿½rea Molhada", "ï¿½rea da Linha d" "ï¿½gua")
    figure
    hold("on")
    plot(LCF, intLA, "m")
    plot(CB[I[:, 1]], intLA, "c")
    plot(CB[I[:, 3]], intLA, "k")
    xlabel("m")
    ylabel("Draught (m)")
    legend("LCF", "LCB", "KB")
    figure
    hold("on")
    plot(BMt, intLA, "b")
    xlabel("m")
    ylabel("Draught (m)")
    legend("BMt")
    figure
    hold("on")
    plot(BMl, intLA, "r")
    xlabel("m")
    ylabel("Draught (m)")
    legend("BMl")
    figure
    hold("on")
    plot(Tcm, intLA, "k")
    xlabel("ton")
    ylabel("Draught (m)")
    legend("Tcm")
    figure
    hold("on")
    plot(Il, intLA, "b")
    xlabel("m^4")
    ylabel("Draught (m)")
    legend("Il")
    figure
    hold("on")
    plot(It, intLA, "r")
    xlabel("m^4")
    ylabel("Draught (m)")
    legend("It")
    figure
    hold("on")
    plot(Cb, intLA, "b")
    plot(Cwl, intLA, "r")
    plot(Cp, intLA, "g")
    ylabel("Draught (m)")
    legend("Cb", "Cwl", "Cp")


if __name__ == "__main__":
    main()